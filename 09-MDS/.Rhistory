library(ggplot2)
library(plyr)
d <- diamonds
mean(d$carat.res)
sd(d$carat.res)
min(d$carat.res)
median(d$carat)
max(d$carat)
d1 <- density(d$carat, kernel = 'gaussian', bw = .05)
plot(dens,main = '')
g <- ggplot(d,aes(x = d$carat, y = d$price)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g
d.2<-ddply(d, 'cut',transform,
logcarat=log(carat,base=10),logprecio=log(price,base=10))
g2 <- ggplot(d.2,aes(x = diamantes.2$logcarat, y = d.2$logprecio)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g2
m <- loess (d$price ~ d$carat, data = d, span = .3 , degree = 1 )
a.m <- cbind(d,fit = m$fitted, res = m$residuals)
r <- ggplot(a.m, aes(x = d$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
r
r2 <- ggplot(a.m, aes(x = d$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
r2
m2 <- loess (d.2$price ~ d.2$carat, data = d.2, span = .2 , degree = 1 )
a.m.2 <- cbind(d.2,fit = m$fitted, res = m$residuals)
re <- ggplot(a.m.2, aes(x = d.2$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
re
re.2 <- ggplot(a.m.2, aes(x = d.2$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
re.2
disp <- ggplot(a.m, aes(x = fit,y = sqrt(abs(res)))) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) +  geom_hline(yintercept = 0)
disp
di <- arrange(a.m,res)
n <- nrow(di)
di$valor.f.tot <- (seq(1,n) - 0.5)/n
di$q.norm.tot <- qnorm(di$valor.f.tot)
c <- ggplot(di,aes(x = q.norm.tot,y = res)) + geom_point() + stat_smooth(method = lm)
c
library(ggplot2)
library(plyr)
diamantes <- diamonds
mean(diamantes$carat.res)
sd(diamantes$carat.res)
min(diamantes$carat.res)
median(diamantes$carat)
max(diamantes$carat)
d.1 <- density(d$carat, kernel = 'gaussian', bw = .05)
plot(dens,main = '')
g1 <- ggplot(diamantes,aes(x = diamantes$carat, y = diamantes$price)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g1
d2<-ddply(diamantes, 'cut',transform,
logcarat=log(carat,base=10),logprecio=log(price,base=10))
g2 <- ggplot(d2,aes(x = d2$logcarat, y = d2$logprecio)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g2
m <- loess (diamantes$price ~ diamantes$carat, data = d, span = .3 , degree = 1 )
a.m <- cbind(d,fit = m$fitted, res = m$residuals)
r1 <- ggplot(a.m, aes(x = diamantes$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
r1
r2 <- ggplot(a.m, aes(x = diamantes$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
r2
m2 <- loess (d2$price ~ d2$carat, data = d2, span = .2 , degree = 1 )
a.m2 <- cbind(d2,fit = m$fitted, res = m$residuals)
re <- ggplot(a.m2, aes(x = d2$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
re
re2 <- ggplot(a.m2, aes(x = d2$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
re2
disper <- ggplot(a.m2, aes(x = fit,y = sqrt(abs(res)))) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) +  geom_hline(yintercept = 0)
disper
dia <- arrange(a.m2,res)
no <- nrow(dia)
dia$valor.f.tot <- (seq(1,no) - 0.5)/no
dia$q.norm.tot <- qnorm(di$valor.f.tot)
c <- ggplot(di,aes(x = q.norm.tot,y = res)) + geom_point() + stat_smooth(method = lm)
c
library(ggplot2)
library(plyr)
diamantes <- diamonds
mean(diamantes$carat)
sd(diamantes$carat)
min(diamantes$carat)
median(diamantes$carat)
max(diamantes$carat)
d.1 <- density(d$carat, kernel = 'gaussian', bw = .05)
plot(d.1,main = '')
g1 <- ggplot(diamantes,aes(x = diamantes$carat, y = diamantes$price)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g1
d2<-ddply(diamantes, 'cut',transform,
logcarat=log(carat,base=10),logprecio=log(price,base=10))
g2 <- ggplot(d2,aes(x = d2$logcarat, y = d2$logprecio)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess', span = .3 , degree = 1 , se = FALSE)
g2
m <- loess (diamantes$price ~ diamantes$carat, data = d, span = .3 , degree = 1 )
a.m <- cbind(d,fit = m$fitted, res = m$residuals)
r1 <- ggplot(a.m, aes(x = diamantes$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
r1
r2 <- ggplot(a.m, aes(x = diamantes$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
r2
m2 <- loess (d2$price ~ d2$carat, data = d2, span = .2 , degree = 1 )
a.m2 <- cbind(d2,fit = m$fitted, res = m$residuals)
re <- ggplot(a.m2, aes(x = d2$carat, y = res)) + geom_point(alpha = 0.5) + geom_hline(yintercept = 0)
re
re2 <- ggplot(a.m2, aes(x = d2$carat, y = res)) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) + geom_hline(yintercept = 0)
re2
disper <- ggplot(a.m2, aes(x = fit,y = sqrt(abs(res)))) + geom_point(alpha = 0.5) +
geom_smooth(method = 'loess',span = .3, degree = 1, se = FALSE) +  geom_hline(yintercept = 0)
disper
dia <- arrange(a.m2,res)
no <- nrow(dia)
dia$valor.f.tot <- (seq(1,no) - 0.5)/no
dia$q.norm.tot <- qnorm(di$valor.f.tot)
c <- ggplot(di,aes(x = q.norm.tot,y = res)) + geom_point() + stat_smooth(method = lm)
c
data(Titanic)
Titanic <- Titanic
Titanic
plot(Titanic)
str(Titanic)
Titanic[1:4]
Titanic[1:4, 1:2]
Titanic[1:4, 1:2,,]
Titanic[1:4, 1:2,1,1]
Titanic[1:4, 1:2,2,1]
No.Surv <- Titanic[1:4, 1:2,1,1] + Titanic[1:4, 1:2,2,1]
No.Surv
No.Surv <- Titanic[1:4, 1:2,1,1] + Titanic[1:4, 1:2,2,1]
Si.Surv <- Titanic[1:4, 1:2,1,2] + Titanic[1:4, 1:2,2,2]
No.Surv
No.Surv <- apply(No.Surv,2,sum)
No.Surv
Si.Surv <- apply(Si.Surv,2,sum)
Si.Surv
Titanic <- Titanic
No.Surv <- Titanic[1:4, 1:2,1,1] + Titanic[1:4, 1:2,2,1]
Si.Surv <- Titanic[1:4, 1:2,1,2] + Titanic[1:4, 1:2,2,2]
No.Surv
No.Surv$Survived <- rep(0,4)
str(No.Surv)
as.data.frame(No.Surv)
as.data.frame(Titanic)
data(Titanic)
Titanic <- as.data.frame(Titanic)
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived)) +
geom_bar(stat = "identity") + theme_bw()
Survived
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived)) +
geom_bar(stat = "identity") + theme_bw()
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, col = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
?stat
??Stat
geom_bar(stat = ..count../n) + theme_bw()
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = ..count../n) + theme_bw()
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = ..count../n) + theme_bw()
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar() + theme_bw()
Survived
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
Titanic
for(i in 1:32){
Titanic$Freq[i] <- Titanic$Freq[i] / sum(Titanic$freq[Titanic$Class == Titanic$Class[i] & Titanic$Sex == Titanic$Sex[i] & Titanic$Survived == Titanic$Survived[i]])
}
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
Titanic$Freq
Titanic$Class == "1st"
Titanic <- as.data.frame(Titanic)
for(i in 1:32){
Titanic$Freq[i] <- Titanic$Freq[i] / sum(Titanic$freq[Titanic$Class == Titanic$Class[i] & Titanic$Sex == Titanic$Sex[i] & Titanic$Survived == Titanic$Survived[i]])
}
View(Titanic)
Titanic <- as.data.frame(Titanic)
Titanic <- as.data.frame(Titanic)
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
for(i in 1:32){
Titanic$Freq[i] <- Titanic$Freq[i] / sum(Titanic$Freq[Titanic$Class == Titanic$Class[i] & Titanic$Sex == Titanic$Sex[i] & Titanic$Survived == Titanic$Survived[i]])
}
View(Titanic)
data(Titanic)
Titanic <- as.data.frame(Titanic)
Titanic$Freq
head(Titanic)
for(i in 1:32){
Titanic$Freq[i] <- Titanic$Freq[i] / sum(Titanic$Freq[Titanic$Class == Titanic$Class[i] & Titanic$Sex == Titanic$Sex[i] & Titanic$Survived == Titanic$Survived[i]])
}
View(Titanic)
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
Titanic <- as.data.frame(Titanic)
for(i in 1:32){
Titanic$Freq[i] <- Titanic$Freq[i] / sum(Titanic$Freq[Titanic$Class == Titanic$Class[i] & Titanic$Sex == Titanic$Sex[i]])
}
Survived <- ggplot(Titanic, aes(x = Class, y = Freq, fill = Survived, alpha = Sex)) +
geom_bar(stat = "identity") + theme_bw()
Survived
library(tidyr)
library(dplyr)
messy <- data.frame(
name = c("Wilbur", "Petunia", "Gregory"),
a = c(67, 80, 64),
b = c(56, 90, 50)
)
messy
messy %>%
gather(drug, heartrate, a:b)
set.seed(10)
messy <- data.frame(
id = 1:4,
trt = sample(rep(c('control', 'treatment'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
messy
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
tidy <- tidier %>%
separate(key, into = c("location", "time"), sep = "\\.")
tidy %>% head(8)
?separate
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
tidy <- tidier %>%
separate(key, into = c("location", "time"), sep = ".")
tidy %>% head(8)
tidy <- tidier %>%
separate(key, into = c("location", "time"), sep = "\\.")
tidy %>% head(8)
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
tidy <- tidier %>%
separate(key, into = c("location", "time"), sep = "\.")
tidier <- messy %>%
gather(key, time, -id, -trt)
tidier %>% head(8)
tidy <- tidier %>%
separate(key, into = c("location", "time"), sep = "\\.")
tidy %>% head(8)
?spread()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% head(8)
stocksm %>% spread(stock,price)
stocksm %>% spread(time, price)
install.packages("knitr")
suppressMessages(library(dplyr))
library(hflights)
# explore data
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights
flights$Speed <- flights$Distance / flights$AirTime*60
suppressMessages(library(dplyr))
library(hflights)
# Exploramos datos
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
# Imprime únicamente los renglones que se ajustan a tu pantalla
flights
# Podemos espicificar que queremos ver más renglones
print(flights, n=20)
# Convertimos en un data frame 'normal'
data.frame(head(flights))
flights[flights$Month==1 & flights$DayofMonth==1, ]
```
```{r}
# Modo dplyr
# note: podemos usar coma o ampersand para representar AND
filter(flights, Month==1, DayofMonth==1)
# Usamos 'pipe' para OR
filter(flights, UniqueCarrier=="AA" | UniqueCarrier=="UA")
# También podemos usar el operador %in% para seleccionar distintos criterios
filter(flights, UniqueCarrier %in% c("AA", "UA"))
flights[, c("DepTime", "ArrTime", "FlightNum")]
```
```{r}
# modo dplyr
select(flights, DepTime, ArrTime, FlightNum)
# Usamos ':' para seleccionar múltiples columnas continuas, y 'contains' para buscar columnas que coincidan con el nombre indicado
# nota: `starts_with`, `ends_with`, y `matches` también puede ser usado para buscar columnas coincidentes
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay))
flights$Speed <- flights$Distance / flights$AirTime*60
flights[, c("Distance", "AirTime", "Speed")]
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60)
# Guardamos la nueva variable
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
head(with(flights, tapply(ArrDelay, Dest, mean, na.rm=TRUE)))
head(aggregate(ArrDelay ~ Dest, flights, mean))
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("Delay"))
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count))
flights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
?sample_n
glimpse(flights)
setwd("/Users/josmanps/REPOS/ML_for_Hackers/09-MDS")
library("foreign")
library("ggplot2")
# Cargamos los datos
data.dir <- file.path("data", "roll_call")
data.files <- list.files(data.dir)
rollcall.data <- lapply(data.files, function(f)
{read.dta(file.path(data.dir, f), convert.factors = FALSE)})
head(rollcall.data[[1]][,1:8])
head(rollcall.data[[1]][,9:18])
head(rollcall.data[[1]][,640:647])
rollcall.simplified <- function(df)
{
no.pres <- subset(df, state < 99)
for(i in 10:ncol(no.pres))
{
no.pres[,i] <- ifelse(no.pres[,i] > 6, 0, no.pres[,i])
no.pres[,i] <- ifelse(no.pres[,i] > 0 & no.pres[,i] < 4, 1, no.pres[,i])
no.pres[,i] <- ifelse(no.pres[,i] > 1, -1, no.pres[,i])
}
return(as.matrix(no.pres[,10:ncol(no.pres)]))
}
rollcall.simple <- lapply(rollcall.data, rollcall.simplified)
```
rollcall.dist <- lapply(rollcall.simple, function(m) dist(m %*% t(m)))
# Do the multidimensional scaling
rollcall.mds <- lapply(rollcall.dist,
function(d) as.data.frame((cmdscale(d, k = 2)) * -1))
congresses <- 101:111
for(i in 1:length(rollcall.mds))
{
names(rollcall.mds[[i]]) <- c("x", "y")
congress <- subset(rollcall.data[[i]], state < 99)
congress.names <- sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
rollcall.mds[[i]] <- transform(rollcall.mds[[i]],
name = congress.names,
party = as.factor(congress$party),
congress = congresses[i])
}
head(rollcall.mds[[1]][,1:4])
```
cong.110 <- rollcall.mds[[9]]
base.110 <- ggplot(cong.110, aes(x = x, y = y)) +
scale_size(range = c(2,2), guide = 'none') +
scale_alpha(guide = 'none') +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank()) +
ggtitle("Roll Call Vote MDS Clustering for 110th U.S. Senate") +
xlab("") +
ylab("") +
scale_shape(name = "Party", breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind."), solid = FALSE) +
scale_color_manual(name = "Party", values = c("100" = "#03a9f4",
"200" = "#ff9800",
"328"="#464646"),
breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind."))
print(base.110 + geom_point(aes(col = party,
alpha = 0.75,
size = 2)))
print(base.110 + geom_text(aes(color = party,
alpha = 0.75,
label = cong.110$name,
size = 2)))
all.mds <- do.call(rbind, rollcall.mds)
all.plot <- ggplot(all.mds, aes(x = x, y = y)) +
geom_point(aes(col = party, alpha = 0.75, size = 2)) +
scale_size(range = c(2, 2), guide = 'none') +
scale_alpha(guide = 'none') +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank()) +
ggtitle("Roll Call Vote MDS Clustering for U.S. Senate (101st - 111th Congress)") +
xlab("") +
ylab("") +
scale_shape(name = "Party", breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind."), solid = FALSE) +
scale_color_manual(name = "Party", values = c("100" = "#03a9f4",
"200" = "#ff9800",
"328"="#464646"),
breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind.")) +
facet_wrap(~ congress)
print(all.plot)
for(i in 1:length(rollcall.mds))
{
mds <- rollcall.mds[[i]]
congress <- congresses[i]
plot.title <- paste("Roll Call Vote MDS Clustering for ",
congress,
" U.S. Senate",
sep = "")
# Build base plot
mds.plot <- ggplot(mds, aes(x = x, y = y)) +
scale_size(range = c(2, 2), guide = 'none') +
scale_alpha(guide = 'none') +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank()) +
ggtitle(plot.title) +
xlab("") +
ylab("")
# Build up point and text plots separately
mds.point <- mds.plot + geom_point(aes(shape = party,
alpha = 0.75,
size = 2))
mds.text <- mds.plot + geom_text(aes(color = party,
alpha = 0.75,
label = mds$name,
size = 2))
# Fix labels, shapes and colors
if(length(levels(mds$party)) > 2)
{
mds.point <- mds.point + scale_shape(name = "Party",
breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind."),
solid = FALSE)
mds.text <- mds.text + scale_color_manual(name = "Party",
values = c("100" = "black",
"200" = "dimgray",
"328" = "gray"),
breaks = c("100", "200", "328"),
labels = c("Dem.", "Rep.", "Ind."))
}
else
{
mds.point <- mds.point + scale_shape(name = "Party",
breaks = c("100", "200"),
labels = c("Dem.", "Rep."),
solid = FALSE)
mds.text <- mds.text + scale_color_manual(name = "Party",
values = c("100" = "black",
"200" = "dimgray"),
breaks = c("100", "200"),
labels = c("Dem.", "Rep."))
}
ggsave(plot = mds.point,
filename = file.path('images',
'senate_plots',
paste(congress, "_point.pdf", sep = "")),
width = 8,
height = 5)
ggsave(plot = mds.text,
filename = file.path('images',
'senate_plots',
paste(congress, "_names.pdf", sep = "")),
width = 8,
height = 5)
}
